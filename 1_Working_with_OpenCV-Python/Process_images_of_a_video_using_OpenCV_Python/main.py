# importing the necessary libraries
import cv2

# Creating a VideoCapture object to read the video| 0 - video from camera
cap = cv2.VideoCapture(0)
# Loop untill the end of the video


while cap.isOpened():

    # Capture frame-by-frame
    ret, frame = cap.read()
    frame = cv2.resize(frame, (540, 380))
    # Display the resulting frame
    cv2.imshow('Frame', frame)

    # ----------------------------Grat Threshold-------------------------

    # conversion of BGR to grayscale is necessary to apply this operation
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # adaptive thresholding to use different threshold
    # values on different regions of the frame.
    Thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    cv2.imshow('Thresh', Thresh)

    # ----------------------------Gaussian Blurring-------------------------
    # (5, 5) is the kernel size for blurring.
    gaussianblur = cv2.GaussianBlur(frame, (5, 5), 0)
    cv2.imshow('gblur', gaussianblur)

    # ----------------------------Edge Detection-------------------------
    # using cv2.Canny() for edge detection.
    edge_detect = cv2.Canny(frame, 100, 200)
    cv2.imshow('Edge detect', edge_detect)

    # ----------------------------Bitwise Operations-------------------------

    # conversion of BGR to grayscale is necessary to apply this operation
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    _, mask = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # apply NOT operation on image and mask generated by thresholding
    BIT = cv2.bitwise_and(frame, frame, mask=mask)
    cv2.imshow('BIT', BIT)

    #numpy_horizontal = np.hstack((frame, frame))
    # cv2.imshow('Numpy Horizontal', numpy_horizontal)

    # define q as the exit button
    if cv2.waitKey(25) & 0xFF == ord('q'):
        break
# release the video capture object
cap.release()
# Closes all the windows currently opened.
cv2.destroyAllWindows()
